// Module for handling model migrations

function __migrations000() {
    if (not $lib.model.prop(file:bytes:_mime:pe:exphash)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:pe:exphash, (hash:sha256, ({})), ({'doc': 'The PE export hash of the file as calculated by pefile; https://github.com/erocarrera/pefile .'}))
    }

    if (not $lib.model.prop(file:mime:pe:export:_address)) {
        $lib.model.ext.addFormProp(file:mime:pe:export, _address, (int, ({})), ({'doc': 'The RVA of the exported function'}))
    }
    if (not $lib.model.prop(file:mime:pe:export:_ordinal)) {
        $lib.model.ext.addFormProp(file:mime:pe:export, _ordinal, (int, ({})), ({'doc': 'The ordinal of the export'}))
    }

    if (not $lib.model.form(_zw:file:mime:pe:import)) {
        $lib.model.ext.addForm(_zw:file:mime:pe:import, guid, ({}), ({'doc': 'The fused knowledge of a file:bytes node containing a pe import.'}))

        $lib.model.ext.addFormProp(_zw:file:mime:pe:import, file, (file:bytes, ({})), ({'doc': 'The file containing the import.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:pe:import, dll, (str, ({})), ({'doc': 'The DLL name to import the function from.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:pe:import, name, (str, ({})), ({'doc': 'The name of the function to import.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:pe:import, ordinal, (int, ({})), ({'doc': 'The ordinal of the function to import.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:pe:import, address, (int, ({})), ({'doc': 'The address for the imported function in the source executable.'}))
    }

    if (not $lib.model.prop(file:subfile:_archive:mtime)) {
        $lib.model.ext.addFormProp(file:subfile, _archive:mtime, (time, ({})), ({'doc': "The modified timestamp of the archive member. If the file format doesn't have multiple timestamps, this prop is used."}))
    }
    if (not $lib.model.prop(file:subfile:_archive:ctime)) {
        $lib.model.ext.addFormProp(file:subfile, _archive:ctime, (time, ({})), ({'doc': 'The changed timestamp of the archive member.'}))
    }
    if (not $lib.model.prop(file:subfile:_archive:atime)) {
        $lib.model.ext.addFormProp(file:subfile, _archive:atime, (time, ({})), ({'doc': 'The accessed timestamp of the archive member.'}))
    }

    if (not $lib.model.form(_zw:file:mime:elf:segment)) {
        $lib.model.ext.addForm(_zw:file:mime:elf:segment, guid, ({}), ({'doc': 'A delineated region of bytes inside of an ELF binary.'}))

        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, file, (file:bytes, ({})), ({'doc': 'The file containing the segment.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, hash, (hash:sha256, ({})), ({'doc': 'The sha256 hash of the segment.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, size, (int, ({})), ({'doc': 'The raw size of the segment.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, disksize, (int, ({})), ({'doc': 'The size of the segment on disk, as defined by the program header.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, memsize, (int, ({})), ({'doc': 'The size of the segment in memory, as defined by the program header.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, type, (int, ({'enums': $modconf.elfphenum})), ({'doc': 'The normalized segment type.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:segment, type:raw, (int, ({})), ({'doc': 'The raw segment type. For values in the OS- and processor-specific ranges, only type:raw is set.'}))
    }
    
    if (not $lib.model.form(_zw:file:mime:elf:section)) {
        $lib.model.ext.addForm(_zw:file:mime:elf:section, guid, ({}), ({'doc': 'A section inside a ELF binary denoting a named region of bytes inside a segment.'}))

        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, segment, (_zw:file:mime:elf:segment, ({})), ({'doc': 'The ELF segment that contains this section.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, hash, (hash:sha256, ({})), ({'doc': 'The sha256 hash of the section.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, size, (int, ({})), ({'doc': 'The size of the section.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, name, (str, ({})), ({'doc': 'The name of the section.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, offset, (int, ({})), ({'doc': 'The file offset to the beginning of the section.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, type, (int, ({'enums': $modconf.elfshenum})), ({'doc': 'The normalized section type.'}))
        $lib.model.ext.addFormProp(_zw:file:mime:elf:section, type:raw, (int, ({})), ({'doc': 'The raw section type. For values in the OS-specific range, only type:raw is set.'}))
    }
}

function __migrations001() {
    if (not $lib.model.prop(file:bytes:_mime:elf:imphash)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:imphash, (hash:sha256, ({})), ({'doc': 'The ELF import hash of the file.'}))
    }
    if (not $lib.model.prop(file:bytes:_mime:elf:exphash)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:exphash, (hash:sha256, ({})), ({'doc': 'The ELF export hash of the file.'}))
    }
    if (not $lib.model.prop(file:bytes:_mime:elf:os)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:os, (int, ({'enums': $modconf.elfosabienum})), ({'doc': 'The normalized OS value of the ELF from the ELF header.'}))
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:os:raw, (int, ({})), ({'doc': 'The raw OS value of the ELF from the ELF header.'}))
    }
    if (not $lib.model.prop(file:bytes:_mime:elf:type)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:type, (int, ({'enums': $modconf.elfetenum})), ({'doc': 'The normalized type value from the ELF header.'}))
    }
    if (not $lib.model.prop(file:bytes:_mime:elf:type:raw)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:elf:type:raw, (int, ({})), ({'doc': 'The raw type value from the ELF header. For values in the OS- and processor-specific ranges, only type:raw is set.'}))
    }
    if (not $lib.model.prop(file:bytes:_exe:bitness)) {
        $lib.model.ext.addFormProp(file:bytes, _exe:bitness, (int, ({})), ({'doc': 'The bitness of the executable.'}))
    }
}

function __migrations002() {
    if (not $lib.model.prop(file:bytes:_mime:pe:debug:time)) {
        $lib.model.ext.addFormProp(file:bytes, _mime:pe:debug:time, (time, ({})), ({'doc': 'The debug time of the file according to the PE.'}))
    }
}

$__migrations = ([
    $__migrations000,
    $__migrations001,
    $__migrations002,
])

function executeMigrations() {
    $ver = $lib.globals.get($modconf.mverkey, default=0)

    $lib.log.info(`executing fileparser model migrations, current version is {$ver}`)

    for $f in $__migrations.slice($ver) {
        $f()
    }

    $lib.globals.set($modconf.mverkey, $__migrations.size())
    $lib.log.info(`fileparser model migrations finished, now at version {$__migrations.size()}`)
}